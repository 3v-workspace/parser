# Generated by Django 2.0.9 on 2019-03-11 16:08

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'Користувач з такою електронною поштою вже існує'}, max_length=254, null=True, verbose_name='email address')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('middle_name', models.CharField(max_length=64, verbose_name='по батькові')),
                ('phone', models.CharField(max_length=64, verbose_name='Особистий телефон')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='День народження')),
                ('passport', models.CharField(max_length=64, verbose_name='Паспортні дані')),
                ('auth_type', models.CharField(blank=True, default='dig_sign', max_length=64, null=True, verbose_name='Тип логінізації')),
                ('identification_code', models.CharField(default='0', max_length=100, verbose_name='Ідинтифікаційний код')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 chaFalseracters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_email_validated', models.BooleanField(default=False, help_text='Верифікація email', verbose_name='email_status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('type', models.CharField(blank=True, choices=[('physical', 'physical'), ('legal', 'legal'), ('fop', 'fop')], max_length=64, null=True, verbose_name='Тип юзера')),
                ('subscribecode', models.CharField(blank=True, max_length=256, null=True, verbose_name='Код підписки')),
                ('unique_code', models.CharField(max_length=256, unique=True)),
                ('region', models.CharField(blank=True, max_length=256, null=True, verbose_name='Область')),
                ('verification_type', models.CharField(blank=True, max_length=64, null=True, verbose_name='Тип верифікації')),
                ('signed_on_notifications', models.BooleanField(default=True, verbose_name='Підписаний на сповіщення')),
                ('show_modal', models.BooleanField(default=False, verbose_name='Show message')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('dept_no', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='code')),
                ('dept_name', models.CharField(max_length=150, unique=True, verbose_name='name')),
                ('priority', models.IntegerField(default=0, verbose_name='Приорітет для сортування')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.Department', verbose_name='Входить у підрозділ')),
            ],
            options={
                'verbose_name': 'department',
                'verbose_name_plural': 'departments',
                'db_table': 'user_departments',
                'ordering': ['dept_no'],
            },
        ),
        migrations.CreateModel(
            name='DeptEmp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активний')),
                ('priority', models.IntegerField(default=0, verbose_name='Приорітет для сортування')),
                ('from_date', models.DateField(default=datetime.datetime.now, verbose_name='from')),
                ('to_date', models.DateField(default=datetime.datetime(2101, 4, 30, 16, 8, 13, 161377), verbose_name='to')),
                ('department', models.ForeignKey(db_column='dept_no', on_delete=django.db.models.deletion.CASCADE, to='users.Department', verbose_name='department')),
                ('user', models.ForeignKey(db_column='emp_no', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='employee')),
            ],
            options={
                'verbose_name': 'department employee',
                'verbose_name_plural': 'department employees',
                'db_table': 'user_dept_emp',
            },
        ),
        migrations.CreateModel(
            name='DeptManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активний')),
                ('from_date', models.DateField(default=datetime.datetime.now, verbose_name='from')),
                ('to_date', models.DateField(default=datetime.datetime(2101, 4, 30, 16, 8, 13, 163427), verbose_name='to')),
                ('department', models.ForeignKey(db_column='dept_no', on_delete=django.db.models.deletion.CASCADE, to='users.Department', verbose_name='department')),
                ('user', models.ForeignKey(db_column='emp_no', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='employee')),
            ],
            options={
                'verbose_name': 'department manager',
                'verbose_name_plural': 'department managers',
                'db_table': 'user_dept_manager',
            },
        ),
        migrations.CreateModel(
            name='Log_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(verbose_name='source')),
                ('type', models.TextField(verbose_name='type')),
                ('json_login', models.TextField(verbose_name='json_login')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date creation')),
            ],
            options={
                'verbose_name': 'Log_Login',
                'verbose_name_plural': 'Log_Login',
                'db_table': 'log_login',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edrpou', models.CharField(blank=True, max_length=100, null=True, verbose_name='Код ЄДРПОУ')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Назва організації')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date creation')),
            ],
        ),
        migrations.CreateModel(
            name='ProxyGroup',
            fields=[
            ],
            options={
                'verbose_name': 'група',
                'verbose_name_plural': 'групи',
                'proxy': True,
                'indexes': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='users.Organization'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='deptmanager',
            unique_together={('user', 'department')},
        ),
        migrations.AlterUniqueTogether(
            name='deptemp',
            unique_together={('user', 'department')},
        ),
    ]
